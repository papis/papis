#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# papis-short-help: Correctly abbreviate journal titles 
# Copyright Â© 2017 Alejandro Gallo. GPLv3
# Last modified: 2018-06-19
import json
import errno
import sys
import os
import papis.api
import papis.commands
import papis.crossref
import papis.document

def usage():
    print("Usage: papis abbrev <papis-search>")
    print("'' --all for all entries")

def print_no_journal():
    print('The document does not have a full_journal_title set')

# load the json dictionary
currdir = os.path.dirname(os.path.abspath(__file__))

try:
    with open(os.path.join(currdir, "LTWA.json")) as json_data:
        d = json.load(json_data)
        json_data.close()
except FileNotFoundError:
    print('LTWA.json not found!')
    print('Did you forget to copy or symlink it to your .config/scripts directory?')
    sys.exit(0)
        
def ltwa_abbreviate(full_journal_name, d=d):
    """
    Abbreviates a journal name using International Standard Serial
    Number (ISSN) guidelines.  ISSN abbreviations list last
    updated 14/09/2017.  Available
    http://www.issn.org/services/online-services/access-to-the-ltwa/
    """    

    # local variables
    ignore_list = [ # List of short words that are ommited in abbreviations
        # en
        'of', 'in', 'the', 'and', 'part',
        # fr
        'des', 'de', 'dans', 'la', 'l', 'le', 'et',
        # de
        'fur','und',
        # ru
        'i'
    ]
    upper_list = [ # List of acronyms that should remain in uppercase in abbreviations
        '3D', '2D', 'ACS', 'ACI', 'ACH', 'MRS', 'ECS',
        'LC', 'GC', 'NATO', 'ASI', 'PLOS',
        'AAPG', 'AAPS', 'AATCC', 'ABB', 'DDR',
        'ACA', 'ACM', 'APL', 'AQEIC', 'DLG',
        'ASSAY', 'ASTM', 'ASTRA',
    ]

    # set counter, i, to 0
    i = 0
    # initialize a new list
    return_list = []
    hyphenation = False

    # if just one word, return that word
    if len(full_journal_name.split(' ')) <= 1:
        return full_journal_name
    
    # for all words in the full name...
    for h, word in enumerate(full_journal_name.replace('-',' -').split(' ')):
        word = word+'.' # Add a full stop to allow [:-i] to function as intended
        hyphenation = False # Set hyphenation to False
        
        if '-' in word.lower():
            # if word contains a hyphen, remove it and set 'hyphenation' to True
            word = word.lower().replace('-','')
            hyphenation = True
            print(word)
            
        #...shrink the word from right to left.
        for i in range(0, len(word.lower())):
                
            # If it matches a json key...
            if word.lower()[:-i] in [x.lower() for x in d.keys()]:
                # ...add it to the list.
                if hyphenation:
                    return_list.append('-'+d[word.lower()[:-i]])
                else:
                    return_list.append(d[word.lower()[:-i]])
                break

            elif word.lower()[:-1] in ignore_list:
                # Don't add the word if in ignore list
                break
            
            # If we get to the end of the word and it doesn't match...
            elif i == len(word.lower()[:-1]):
                # ...add the full word to the list.
                if hyphenation:
                    return_list.append('-'+word.lower()[:-1])
                else:
                    return_list.append(word.lower()[:-1])

    # concatenate the list to a string,
    # capitalising the first letter of each word...
    for j, word in enumerate(return_list):
        # ...unless it is an acronym.
        if word.upper().replace('-','') in upper_list:
            return_list[j] = return_list[j].upper()
        else:
            return_list[j] = return_list[j].title()
    return " ".join(return_list).replace(' -','-')

    
if len(sys.argv) < 2:
    search = ""
else:
    search = sys.argv[1]
    if search in ['-h', '--help']:
        usage()
        sys.exit(0)

add_flags = sys.argv[2:]

documents = papis.api.get_documents_in_lib(
    papis.api.get_lib(),
    search=search
)

if '--all' in add_flags:
    doc = documents
else:
    doc = [papis.api.pick_doc(
        documents
    )]

for item in doc:    
    if 'full_journal_title' not in item.keys():
        print_no_journal()
    else:
        full_journal_title = item['full_journal_title']

        # Get the data from the picked document
        data = papis.document.to_dict(item)

        # Set the new abbrev_journal_title
        data['abbrev_journal_title'] = ltwa_abbreviate(full_journal_title)
        print(data['ref'],'|', full_journal_title, 'abbreviated to', data['abbrev_journal_title'])

        # Update the data and save
        item.update(data, force=True)
        item.save()
sys.exit(0)
