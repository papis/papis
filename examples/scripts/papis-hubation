#! /usr/bin/env python3
# -*- coding: utf-8 -*-
# papis-short-help: Look-up citations of documents
# Copyright Â© 2017 Alejandro Gallo. GPLv3
# Last modified: 2017-11-19
"""
.. papis-config:: hubation

   This allows the operation after picking be set when using the
   script papis-hubation. Running ``papis hubation`` provides a list
   of citations, which once picked, can undergo the operation
   'e.g. open, browse, scihub' that is set. Current tested options are
   ``open``, ``browse``, ``export``, and ``scihub``.

   Default behaviour is set to scihub.
"""
import papis.api
import papis.utils
import papis.crossref
import papis.document
import click
import papis.cli
import papis.database
import sys
import papis.config
from prompt_toolkit.shortcuts import ProgressBar

options = {
    'hubation': {
        'command': 'papis scihub {doc[doi]}'
    }
}
papis.config.register_default_settings(options)


def print_no_citations_and_exit():
    click.echo('The document does not have any citation information')
    sys.exit(1)


@click.command(context_settings=dict(ignore_unknown_options=True))
@click.help_option('--help', '-h')
@papis.cli.query_option()
@click.option(
    "--max-citations", "-m", default=-1,
    help='Number of citations to be retrieved'
)
@click.option(
    "--cmd",
    default=lambda: papis.config.get('command', section='hubation'),
    help='What command to do'
)
@click.argument('add_flags', nargs=-1)
def cli(cmd, max_citations, query, add_flags):
    """Look-up citations of documents"""
    import papis.api

    documents = papis.api.get_documents_in_lib(
        papis.api.get_lib(),
        search=query
    )

    doc = papis.api.pick_doc(documents)
    db = papis.database.get()

    if 'citations' not in doc.keys() or doc['citations'] == []:
        print_no_citations_and_exit()

    dois = [d.get('doi') for d in doc['citations']]
    if max_citations < 0:
        max_citations = len(dois)
    dois = dois[0:min(max_citations, len(dois))]

    click.echo("%s citations found" % len(dois))
    click.echo("Fetching {} citations'".format(max_citations))
    dois_with_data = []

    with ProgressBar() as progress:
        for j, doi in progress(enumerate(dois), total=len(dois)):
            citation = db.query_dict(dict(doi=doi))

            if citation:
                dois_with_data.append(papis.api.pick_doc(citation))
            else:
                dois_with_data.append(
                    papis.crossref.doi_to_data(doi)
                )

    documents = [papis.document.Document(data=d) for d in dois_with_data]
    doc = papis.api.pick_doc(documents)
    doc or sys.exit(0)
    doi = doc["doi"]

    doi or sys.exit(0)

    click.echo('DOI %s selected' % doi)

    # set citation as the doc if it's already in the library
    citation = db.query_dict(dict(doi=doi))

    if cmd is not None:
        papis.config.set('command', cmd, section='hubation')

    # get hubation options
    cmd = papis.config.get('command', section='hubation')

    # if open in config_options...
    if 'open' in cmd:
        # Check if the citation is already in your library
        if citation:
            # and open the associated file
            import papis.command.open
            papis.command.open.run(doc)
        else:
            # if it isn't, open in a browser
            papis.document.open_in_browser(doc)

    elif 'browse' in cmd:
        papis.document.open_in_browser(doc)

    else:
        from subprocess import call
        command = papis.utils.format_doc(cmd, doc)
        click.echo('Calling "%s"' % command)
        call(command.split(" "))


if __name__ == "__main__":
    cli()
