"""Add all components (files) and directories generated by pyinstaller in
dist/papis/_internal into the XML manifest that is used to create the MSI."""

import os
import lxml.etree as et
import uuid


def get_id(*path_components: str) -> str:
    """Create an element ID based on the WiX constraints.

    The allowed characters as of version 4.0.5 can be found
    `here <https://github.com/wixtoolset/wix/blob/289c93dc24ba203903d9c8a6261a68de95d3d911/src/wix/WixToolset.BuildTasks/ToolsCommon.cs#L18>`__.
    Largely, the identifier should be 72 chars or less, contain ``[a-zA-Z0-9_-]``,
    and start with underscore or letter.

    This function uses the hash of the joined *path_components* as the identifier.
    This is guaranteed to be less than 72 characters and only uses digits.
    """  # noqa: E501

    result = abs(hash("/".join(path_components)))
    return f"_{result}"


def render_template(template: str, outfile: str) -> None:
    wxs_tree = et.parse(template)
    wxs_root = wxs_tree.getroot()

    xpath_ns = {"main": "http://wixtoolset.org/schemas/v4/wxs"}
    component = wxs_root.xpath(
        ".//main:Directory[@Id='INSTALLFOLDER']", namespaces=xpath_ns
    )[0]
    package = wxs_root.xpath(".//main:Package", namespaces=xpath_ns)[0]

    root_dir = os.path.join("dist", "papis", "_internal")
    directories = et.SubElement(
        component, "Directory", Name="_internal", Id=get_id(root_dir)
    )
    component_group = et.SubElement(package, "ComponentGroup", Id="_internal")

    for root, dirs, files in os.walk(root_dir):
        for dir in dirs:
            relpath = os.path.relpath(root, root_dir)
            parent_path = os.path.dirname(relpath)
            if parent_path == "":
                parent_element = directories
            else:
                parent_element_id = get_id(root_dir, parent_path)
                xpath = f".//Directory[@Id='{parent_element_id}']"
                parent_element = directories.xpath(xpath)[0]

            et.SubElement(parent_element, "Directory", Name=dir, Id=get_id(root, dir))

        if files:
            for file in files:
                component = et.SubElement(
                    component_group,
                    "Component",
                    Guid=str(uuid.uuid4()),
                    Id=f"c{get_id(root, file)}",
                    Directory=get_id(root),
                )
                et.SubElement(
                    component, "File", KeyPath="yes", Source=os.path.join(root, file)
                )

    wxs_tree.write(outfile, pretty_print=True)


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("template", help="path to a template file")
    parser.add_argument("-o", "--outfile", default=None,
                        help="output file generated from the template")
    args = parser.parse_args()

    outfile = args.outfile
    if outfile is None:
        outfile = os.path.join(os.path.dirname(args.template), "papis.wxs")

    render_template(args.template, outfile)
